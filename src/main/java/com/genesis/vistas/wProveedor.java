package com.genesis.vistas;

import com.genesis.model.conexion;
import com.genesis.controladores.tableController;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import util.Tools;
import util.ComboBox;

public class wProveedor extends javax.swing.JInternalFrame implements ActiveFrame {
    int userRolId = conexion.getGrupoId();
    String menuName = "";
    
    private boolean userSelectItem = false; // jcbDepartamento selecteditem?
    private final tableController tc;
    private Map<String, String> myData;
    String currentField = "";

    /**
     * Creates new form wProveedor
     * @param  menuName JMenu.name de wPrincipal para ver esta vista
     */
    public wProveedor(String menuName) {
        initComponents();
        this.menuName = menuName;
        tc = new tableController();
        tc.init("proveedores");
        myData = new HashMap<>();
        ComboBox.pv_cargar(jcbDepartamento, "departamentos", " id, nombre ", "id", "");
        ComboBox.pv_cargar(jcbCiudad, "ciudades", " id, nombre ", "id", "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tf_ruc = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tf_nombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tf_direccion = new javax.swing.JTextField();
        tf_celular = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tf_telefono = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tf_correo = new javax.swing.JTextField();
        tf_id = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jcbDepartamento = new javax.swing.JComboBox<>();
        jcbCiudad = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("ABM Proveedores");

        jLabel1.setText("ID PROVEEDOR");

        jLabel2.setText("RUC ");

        jLabel3.setText("NOMBRE");

        jLabel4.setText("CIUDAD");

        jLabel5.setText("DIRECCION");

        jLabel6.setText("CELULAR");

        jLabel7.setText("TELEFONO");

        jLabel8.setText("CORREO");

        tf_id.setText("0");
        tf_id.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tf_idFocusGained(evt);
            }
        });
        tf_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tf_idKeyPressed(evt);
            }
        });

        jLabel9.setText("DEPARTAMENTO");

        jcbDepartamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbDepartamentoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel1)))
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jLabel8))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tf_celular)
                    .addComponent(tf_ruc)
                    .addComponent(tf_nombre)
                    .addComponent(tf_direccion)
                    .addComponent(tf_telefono)
                    .addComponent(tf_correo)
                    .addComponent(tf_id)
                    .addComponent(jcbDepartamento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbCiudad, 0, 167, Short.MAX_VALUE))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tf_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tf_ruc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tf_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jcbCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tf_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_celular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tf_telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tf_correo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tf_idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_idKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            imBuscar();
        }
    }//GEN-LAST:event_tf_idKeyPressed

    private void tf_idFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_idFocusGained
        this.currentField = "id";
    }//GEN-LAST:event_tf_idFocusGained

    private void jcbDepartamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbDepartamentoItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED && userSelectItem) {
                // Llamar a la función para filtrar las ciudades solo cuando se selecciona un nuevo ítem
                filtrarCiudades();
                System.out.println("Se ha filtrado jcbCiudades en wProveedor");
            }
        userSelectItem = true; // Marcar que el usuario seleccionó un item
    }//GEN-LAST:event_jcbDepartamentoItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JComboBox<String> jcbCiudad;
    private javax.swing.JComboBox<String> jcbDepartamento;
    private javax.swing.JTextField tf_celular;
    private javax.swing.JTextField tf_correo;
    private javax.swing.JTextField tf_direccion;
    public javax.swing.JTextField tf_id;
    private javax.swing.JTextField tf_nombre;
    private javax.swing.JTextField tf_ruc;
    private javax.swing.JTextField tf_telefono;
    // End of variables declaration//GEN-END:variables


    @Override
    public void imGrabar(String crud) {
        int id, rows;
        String msg;
        if (Tools.validarPermiso(userRolId, menuName, crud) == 0) {
            msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÓN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        id = Integer.parseInt(tf_id.getText());
        if (id > 0) {
            this.imActualizar("u");
            return;
        }
        this.setData();
        rows = this.tc.createReg(this.myData);
        if(rows > 0) {
            this.fillView(myData);
            msg = "SE CREÓ NUEVO REGISTRO";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.INFORMATION_MESSAGE);
            imNuevo();
        }
    }

    @Override
    public void imActualizar(String crud) {
        String msg;
        if (Tools.validarPermiso(userRolId, menuName, crud) == 0) {
            msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÓN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        System.out.println("V imActualizar");
        this.setData();
        ArrayList<Map<String, String>> alCabecera;
        alCabecera = new ArrayList<>();
        alCabecera.add(myData);
        int rowsAffected = this.tc.updateReg(alCabecera);
        if(rowsAffected > 0) {
            msg = "SE HA ACTUALIZADO EXITOSAMENTE EL REGISTRO: " + myData.get("id");
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    @Override
    public void imBorrar(String crud) {
        String msg;
        if (Tools.validarPermiso(userRolId, menuName, crud) == 0) {
            msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÓN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.setData();
        ArrayList<Map<String, String>> alRegister;
        alRegister = new ArrayList<>();
        alRegister.add(myData);
        int rows = this.tc.deleteReg(alRegister);
        if (rows <= 0) {
            msg = "NO SE HA PODIDO ELIMINAR EL REGISTRO: " + tf_id.getText();
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (rows > 0) {
            msg = "EL REGISTRO: " + tf_id.getText() + " SE HA ELIMINADO CORRECTAMENTE";
            System.out.println(msg);
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.INFORMATION_MESSAGE);
        }
        imNuevo();
    }

    @Override
    public void imNuevo() {
        this.resetData();
        this.fillView(myData);    
        tf_id.requestFocus();
    }

    @Override
    public void imBuscar() {
        this.setData();
        myData = tc.searchById(this.myData);
        if (this.myData.size() < 1) {
            String msg = "NO SE HA PODIDO RECUPERAR EL REGISTRO: " + tf_id.getText();
            this.resetData();
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.OK_OPTION);
        }
        this.fillView(myData);
        System.out.println("V imBuscar myData: " + myData.toString());
    }

    @Override
    public void imPrimero() {
        this.setData();
        this.myData = this.tc.navegationReg(tf_id.getText(), "FIRST");
        this.fillView(this.myData);
    }

    @Override
    public void imSiguiente() {
        this.setData();
        this.myData = this.tc.navegationReg(tf_id.getText(), "NEXT");
        this.fillView(this.myData);
    }

    @Override
    public void imAnterior() {
        this.setData();
        this.myData = this.tc.navegationReg(tf_id.getText(), "NEXT");
        this.fillView(this.myData);
    }

    @Override
    public void imUltimo() {
        this.setData();
        this.myData = this.tc.navegationReg(tf_id.getText(), "NEXT");
        this.fillView(this.myData);
    }

    @Override
    public void imImprimir() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void imInsDet() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void imDelDet() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void imCerrar() {
        setVisible(false);
        dispose();
    }

    private void setData() {
        myData.put("id", tf_id.getText());
        myData.put("ruc", tf_ruc.getText());
        myData.put("nombre", tf_nombre.getText());
        myData.put("departamentoid", ComboBox.ExtraeCodigo(jcbDepartamento.getSelectedItem().toString()));
        myData.put("ciudadid", ComboBox.ExtraeCodigo(jcbCiudad.getSelectedItem().toString()));
        myData.put("direccion", tf_direccion.getText());
        myData.put("celular", tf_celular.getText());
        myData.put("telefono", tf_telefono.getText());
        myData.put("correo", tf_correo.getText());
    }//fin setData

    private void resetData() {
        myData.put("id", "0");
        myData.put("ruc", "");
        myData.put("nombre", "");
        myData.put("categoriaid", "0");
        myData.put("departamentoid", "0");
        myData.put("ciudadid", "0");
        myData.put("direccion", "");
        myData.put("celular", "");
        myData.put("telefono", "");
        myData.put("correo", "");
        fillView(myData);
    }
    
    private void filtrarCiudades() {
        String whereClause = "departamentoid = " + ComboBox.ExtraeCodigo(jcbDepartamento.getSelectedItem().toString());
        ComboBox.pv_cargar(jcbCiudad, "ciudades", "id, nombre", "id", whereClause);
    }

    private void fillView(Map<String, String> data) {
        for (Map.Entry<String, String> entry : data.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();
            switch (key) {
                case "id":
                    tf_id.setText(value);
                    break;
                case "ruc":
                    tf_ruc.setText(value);
                    break;
                case "nombre":
                    tf_nombre.setText(value);
                    break;
                case "departamentoid":
                    Tools.E_estado(jcbDepartamento, "departamentos", "id=" + value);
                    break;  
                case "ciudadid":
                    Tools.E_estado(jcbCiudad, "ciudades", "id=" + value);
                    break;                
                case "direccion":
                    tf_direccion.setText(value);
                    break;
                case "celular":
                    tf_celular.setText(value);
                    break;
                case "telefono":
                    tf_telefono.setText(value);
                    break;
                case "correo":
                    tf_correo.setText(value);
                    break;
            }//end switch
        }//end for
    }//end fill

    @Override
    public void imFiltrar() {
        String sql = "";
        if (currentField.equals("")) {
            return;
        }
        switch (currentField) {
            case "id":
                sql = "SELECT id AS codigo ,"
                        + "CONCAT(ruc, ' - ', nombre) AS descripcion "
                        + "FROM proveedores "
                        + "WHERE LOWER(CONCAT(id, ruc, nombre)) LIKE '%";
                break;
            case "idOtro":

                break;
        }
        wBuscar frame = new wBuscar(sql, this.tf_id);
        frame.setVisible(true);
        wPrincipal.desktop.add(frame);
        try {
            frame.setSelected(true);
        } catch (PropertyVetoException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.OK_OPTION);
        }
    }//end imFiltrar
}//end class