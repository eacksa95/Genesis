/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.genesis.vistas;

import com.genesis.model.conexion;
import com.genesis.controladores.tableController;
import util.Tools;
import java.awt.event.KeyEvent;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author RC
 */
public class wCategoria extends javax.swing.JInternalFrame implements ActiveFrame {

    private final tableController tc;
    private Map<String, String> myData;
    String currentField;
    int userRolId = conexion.getGrupoId();
    String menuName = "";
    String CRUD = "";
    /**
     * Creates new form wCategoria
     * @param menuName es el JMenu.name de wPrincipal para entrar a esta vista
     */
    public wCategoria(String menuName) {
        initComponents();
        this.menuName = menuName;
        tc = new tableController();
        tc.init("categorias");
        this.currentField = "";
        myData = new HashMap<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tf_id = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tf_nombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tf_descripcion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("ABM CATEGORIA");

        tf_id.setText("0");
        tf_id.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tf_idFocusGained(evt);
            }
        });
        tf_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tf_idKeyPressed(evt);
            }
        });

        jLabel1.setText("Id");

        jLabel2.setText("Nombre ");

        jLabel3.setText("Descripción");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf_id)
                    .addComponent(tf_nombre))
                .addGap(27, 27, 27))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tf_descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tf_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tf_idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_idKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            imBuscar();
        }
    }//GEN-LAST:event_tf_idKeyPressed

    private void tf_idFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_idFocusGained
        this.currentField = "id";
    }//GEN-LAST:event_tf_idFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField tf_descripcion;
    private javax.swing.JTextField tf_id;
    private javax.swing.JTextField tf_nombre;
    // End of variables declaration//GEN-END:variables

    @Override
    public void imGrabar(String crud) {
        this.CRUD = crud;
        String msg;
        if (Tools.validarPermiso(userRolId, menuName, crud) == 0) {
            msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÓN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int id, rows;
        this.setData();
        id = Integer.parseInt(tf_id.getText());
        if (id > 0) {
            this.imActualizar("u");
            return;
        }
        rows = this.tc.createReg(this.myData);
        if(rows > 0){       
            msg = "SE CREÓ EL NUEVO REGISTRO: " + tf_id.getText();
            resetData();
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    @Override
    public void imActualizar(String crud) {
         this.CRUD = crud;
         String msg;
        if (Tools.validarPermiso(userRolId, menuName, crud) == 0) {
            msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÓN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.setData();
        ArrayList<Map<String, String>> alCabecera;         //Declara array de Map, cada Map es para un registro
        alCabecera = new ArrayList<>(); //Instancia array
        alCabecera.add(myData);                           //agrega el Map al array, para la cabecera será el mejor de los casos, es decir 1 registro 
        int rowsAffected = this.tc.updateReg(alCabecera); //Está guardando igual si en el detalle hay error
        if(rowsAffected > 0) {
            msg = "Registro Actualizado";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    @Override
    public void imBorrar(String crud) {
         this.CRUD = crud;
         String msg;
        if (Tools.validarPermiso(userRolId, menuName, crud) == 0) {
            msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÓN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.setData();
        ArrayList<Map<String, String>> alRegister;
        alRegister = new ArrayList<>();
        alRegister.add(myData);
        int rows = this.tc.deleteReg(alRegister);
        if (rows <= 0) {
            msg = "NO SE HA PODIDO ELIMINAR EL REGISTRO: " + myData.get("id");
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (rows > 0) {
            msg = "EL REGISTRO: " + myData.get("id") + " SE HA ELIMINADO CORRECTAMENTE";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.INFORMATION_MESSAGE);
        }
        imNuevo();
    }

    @Override
    public void imBuscar() {
        this.setData();
        myData = tc.searchById(this.myData);
        if (this.myData.size() <= 0) {
            String msg = "NO SE HA PODIDO RECUPERAR EL REGISTRO: " + tf_id.getText();
            this.resetData();
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.fillView(myData);
        System.out.println("V imBuscar myData: " + myData.toString());
    }

    @Override
    public void imNuevo() {
        this.resetData();
        this.fillView(myData);
        tf_id.requestFocus();
    }
    
    @Override
    public void imPrimero() {
        this.setData();
        this.myData = this.tc.navegationReg(tf_id.getText(), "FIRST");
        this.fillView(this.myData);
    }

    @Override
    public void imSiguiente() {
        this.setData();
        this.myData = this.tc.navegationReg(tf_id.getText(), "NEXT");
        this.fillView(this.myData);
    }

    @Override
    public void imAnterior() {
        this.setData();
        this.myData = this.tc.navegationReg(tf_id.getText(), "PRIOR");
        this.fillView(this.myData);
    }

    @Override
    public void imUltimo() {
        this.setData();
        this.myData = this.tc.navegationReg(tf_id.getText(), "LAST");
        this.fillView(this.myData);
    }

    @Override
    public void imImprimir() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void imInsDet() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void imDelDet() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void imCerrar() {
        setVisible(false);
        dispose();
    }

    private void setData() {
        myData.put("id", tf_id.getText());
        myData.put("nombre", tf_nombre.getText());
        myData.put("descripcion", tf_descripcion.getText());
    }//fin setData

    private void resetData() {
        myData.put("id", "0");
        myData.put("nombre", "");
        myData.put("descripcion", "");
        fillView(myData);
    }

    private void fillView(Map<String, String> data) {
        for (Map.Entry<String, String> entry : data.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();
            switch (key) {
                case "id":
                    tf_id.setText(value);
                    break;
                case "nombre":
                    tf_nombre.setText(value);
                    break;
                case "descripcion":
                    tf_descripcion.setText(value);
                    break;
            }//end switch
        }//end for
    }//end fill

    @Override
    public void imFiltrar() {
        String sql = "";
        if (currentField.equals("")) {
            return;
        }
        switch (currentField) {
            case "id":
                sql = "SELECT id AS codigo ,"
                        + "CONCAT(nombre, ' - ',descripcion) AS descripcion "
                        + "FROM categorias "
                        + "WHERE LOWER(CONCAT(id, nombre)) LIKE '%";
                break;
            case "idOtro":

                break;
        }

        wBuscar frame = new wBuscar(sql, this.tf_id);
        frame.setVisible(true);
        wPrincipal.desktop.add(frame);
        try {
            frame.setSelected(true);
        } catch (PropertyVetoException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//end imFiltrar
    
}// END CLASS
