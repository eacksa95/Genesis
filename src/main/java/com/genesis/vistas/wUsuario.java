/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.genesis.vistas;

import com.genesis.controladores.tableController;
import com.genesis.model.conexion;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import util.Tools;
import util.cargaComboBox;

/**
 *
 * @author eacks
 */
public class wUsuario extends javax.swing.JInternalFrame implements ActiveFrame {

    private tableController tc;
    private Map<String, String> myData;
    String currentField;
    String Opcion = "";
    String CRUD = "";
    
    
    /**
     * Creates new form SegUsuarios
     */
    public wUsuario(String menuName) {
        initComponents();
        this.Opcion = menuName;
        tc = new tableController();
        tc.init("usuarios");
        this.currentField = "";
        myData = new HashMap<String, String>();
        cargaComboBox.pv_cargar(jcbEmpleado, "empleados", " id, CONCAT(nombre, apellido) ", "id", "");
        cargaComboBox.pv_cargar(jcbRol, "roles", " id, rol", "id", "");
    }

    private void setData() {
        myData.put("id", tfId.getText());
        myData.put("email", tfEmail.getText());
        myData.put("username", tfUsuario.getText());
        
        if(!"".equals(tfPassword.getText())){
            myData.put("password", Tools.encryptMD5(tfPassword.getText()));
        }
        
        myData.put("rolid", Tools.ExtraeCodigo(jcbRol.getSelectedItem().toString()));
        myData.put("empleadoid", Tools.ExtraeCodigo(jcbEmpleado.getSelectedItem().toString()));
        
        int estado = 0;
        if (jCheckActivo.isSelected()) {
            estado = 1;
        }
        myData.put("activo", estado + "");
        System.out.println("Intersamos: " + myData.toString());
    }//fin setData

    private void resetData() {
        myData.put("id", "0");
        myData.put("email", "");
        myData.put("username", "");
        myData.put("password", "");
        myData.put("rolid", "0");
        myData.put("empleadoid", "0");
        myData.put("activo", "0");
    }//fin resetData

    private void fillView(Map<String, String> data) {
        for (Map.Entry<String, String> entry : data.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();
            switch (key) {
                case "id":
                    tfId.setText(value);
                    break;
                case "email":
                    tfEmail.setText(value);
                    break;
                case "username":
                    tfUsuario.setText(value);
                    break;
                case "rolid":
                    Tools.E_estado(jcbRol, "roles", "id=" + value);
                    break;
                case "empleadoid":
                    Tools.E_estado(jcbEmpleado, "empleados", "id=" + value);
                    break;
                case "activo":
                    if (Integer.parseInt(value) == 0) {
                        jCheckActivo.setSelected(false);
                    } else {
                        jCheckActivo.setSelected(true);
                    }
                    break;
            }//end switch
        }//end for
    }//end fill
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblEmpleado = new javax.swing.JLabel();
        lblUsuario = new javax.swing.JLabel();
        lblRol = new javax.swing.JLabel();
        lblCorreo = new javax.swing.JLabel();
        tfId = new javax.swing.JTextField();
        tfUsuario = new javax.swing.JTextField();
        tfEmail = new javax.swing.JTextField();
        jCheckActivo = new javax.swing.JCheckBox();
        jcbEmpleado = new javax.swing.JComboBox<>();
        jcbRol = new javax.swing.JComboBox<>();
        lblPassword = new javax.swing.JLabel();
        tfPassword = new javax.swing.JTextField();

        jLabel1.setText("Id");

        lblEmpleado.setText("Empleado");

        lblUsuario.setText("Usuario");

        lblRol.setText("Rol");

        lblCorreo.setText("Correo");

        tfId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfIdFocusGained(evt);
            }
        });
        tfId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfIdKeyPressed(evt);
            }
        });

        jCheckActivo.setText("Activo");

        jcbEmpleado.setToolTipText("");

        lblPassword.setText("Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblEmpleado)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbEmpleado, 0, 193, Short.MAX_VALUE)
                            .addComponent(tfId)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblRol)
                            .addComponent(lblUsuario)
                            .addComponent(lblCorreo)
                            .addComponent(lblPassword))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCheckActivo)
                            .addComponent(tfUsuario)
                            .addComponent(jcbRol, 0, 193, Short.MAX_VALUE)
                            .addComponent(tfEmail)
                            .addComponent(tfPassword))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmpleado)
                    .addComponent(jcbEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsuario)
                    .addComponent(tfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(tfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRol)
                    .addComponent(jcbRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCorreo)
                    .addComponent(tfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jCheckActivo)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfIdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfIdFocusGained
        currentField = "id";
    }//GEN-LAST:event_tfIdFocusGained

    private void tfIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIdKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            imBuscar();
        }        
     
    }//GEN-LAST:event_tfIdKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckActivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> jcbEmpleado;
    private javax.swing.JComboBox<String> jcbRol;
    private javax.swing.JLabel lblCorreo;
    private javax.swing.JLabel lblEmpleado;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRol;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JTextField tfId;
    private javax.swing.JTextField tfPassword;
    private javax.swing.JTextField tfUsuario;
    // End of variables declaration//GEN-END:variables

   @Override
    public void imGrabar(String crud) {
        this.CRUD = crud;
        int metodo = 3;
        System.out.println("OPCION DE LA VENTANA PRINCIPAL: " + Opcion);
        metodo = Tools.validarPermiso(conexion.getGrupoId(), Opcion, crud);
        System.out.println("METODOOO; " + metodo);
        if (Tools.validarPermiso(conexion.getGrupoId(), Opcion, crud) == 0) {
            String msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÓN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.OK_OPTION);
            return;
        }
        int id, rows = 0;
        id = Integer.parseInt(tfId.getText());
        if (id > 0) {
            this.imActualizar("C");
            String msg = "SE HA ACTUALIZADO EXITOSAMENTE EL REGISTRO: " + tfId.getText();
            System.out.println(msg);
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.DEFAULT_OPTION);
            return;
        }
        this.setData();
        rows = this.tc.createReg(this.myData);
        this.fillView(myData);
        String msg = "SE CREÓ EL NUEVO REGISTRO: " + tfId.getText();
        System.out.println(msg);
        JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.DEFAULT_OPTION);
         imNuevo();
    }

    @Override
    public void imFiltrar() {
        String sql;
        sql = "";
        wBuscar frame = null;
        if (currentField == "id") {
            sql = "SELECT id AS codigo ,"
                    + "CONCAT(username, ' - ', 'aqui nombre y apellido') AS descripcion "
                    + "FROM usuarios "
                    + "WHERE LOWER(CONCAT(id, username)) LIKE '%";

            frame = new wBuscar(sql, this.tfId);
        }
        frame.setVisible(true);
        wPrincipal.desktop.add(frame);
        try {
            frame.setSelected(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.OK_OPTION);
        }
    }

    @Override
    public void imActualizar(String crud) {
        this.CRUD = crud;
        int metodo = 3;
        System.out.println("OPCION DE LA VENTANA PRINCIPAL: " + Opcion);
        metodo = Tools.validarPermiso(conexion.getGrupoId(), Opcion, crud);
        System.out.println("METODOOO; " + metodo);
        if (Tools.validarPermiso(conexion.getGrupoId(), Opcion, crud) == 0) {
            String msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÓN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.OK_OPTION);
            return;
        }
        System.out.println("V imActualizar");
        this.setData();
        ArrayList<Map<String, String>> alCabecera;         //Declara array de Map, cada Map es para un registro
        alCabecera = new ArrayList<Map<String, String>>(); //Instancia array
        alCabecera.add(myData);                           //agrega el Map al array, para la cabecera será el mejor de los casos, es decir 1 registro 
        int rowsAffected = this.tc.updateReg(alCabecera); //Está guardando igual si en el detalle hay error
    }

    @Override
    public void imBorrar(String crud) {
        this.CRUD = crud;
        int metodo = 3;
        System.out.println("OPCION DE LA VENTANA PRINCIPAL: " + Opcion);
        metodo = Tools.validarPermiso(conexion.getGrupoId(), Opcion, crud);
        System.out.println("METODOOO; " + metodo);
        if (Tools.validarPermiso(conexion.getGrupoId(), Opcion, crud) == 0) {
            String msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÓN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.OK_OPTION);
            return;
        }
        this.setData();
        ArrayList<Map<String, String>> alRegister;              //Declara un Array de Map
        alRegister = new ArrayList<Map<String, String>>();      //Instancia el array
        alRegister.add(myData);                                //Agregamos el map en el array
        int b = this.tc.deleteReg(alRegister);               //Invocamos el método deleteReg del Modelo que procesa un array 
        //int b =   this.tc.deleteReg(tf_id.getText());
        if (b <= 0) {
            String msg = "NO SE HA PODIDO ELIMINAR EL REGISTRO: " + tfId.getText();
            System.out.println(msg);
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.OK_OPTION);
            return;
        }
        if (b > 0) {
            String msg = "EL REGISTRO: " + tfId.getText() + " SE HA ELIMINADO CORRECTAMENTE";
            System.out.println(msg);
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.DEFAULT_OPTION);
        }
        imNuevo();
    }

    @Override
    public void imNuevo() {
        this.resetData();
        this.fillView(myData);   
    }

    @Override
    public void imBuscar() {
        this.setData();
        myData = tc.searchById(this.myData);
        if (this.myData.size() <= 0) {
            String msg = "NO SE HA PODIDO RECUPERAR EL REGISTRO: " + tfId.getText();
            this.resetData();
            JOptionPane.showMessageDialog(this, msg, "ATENCIÓN...!", JOptionPane.OK_OPTION);
        }
        myData.remove("password");
        this.fillView(myData);
        System.out.println("V imBuscar myData: " + myData.toString());
    }

    @Override
    public void imPrimero() {
        this.setData();
        this.myData = this.tc.navegationReg(tfId.getText(), "FIRST");
        this.fillView(this.myData);
    }

    @Override
    public void imSiguiente() {
        this.setData();
        this.myData = this.tc.navegationReg(tfId.getText(), "NEXT");
        this.fillView(this.myData);
    }

    @Override
    public void imAnterior() {
        this.setData();
        this.myData = this.tc.navegationReg(tfId.getText(), "PRIOR");
        this.fillView(this.myData);
    }

    @Override
    public void imUltimo() {
        this.setData();
        this.myData = this.tc.navegationReg(tfId.getText(), "LAST");
        this.fillView(this.myData);
    }


    @Override
    public void imImprimir() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void imInsDet() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void imDelDet() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void imCerrar() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    

}
