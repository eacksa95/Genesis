package com.genesis.vistas;

import com.genesis.controladores.RegistrosController;
import com.genesis.model.conexion;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import util.Tools;

/**
 * @author Ezequiel Cristaldo
 */
public class RegEmpleados extends javax.swing.JInternalFrame implements ActiveFrame {
    RegistrosController rc;
    private Map<String, String> formParams;
    ArrayList<Map<String, String>> rowsModificados;
    private ArrayList<Map<String, String>> empleadosRegisters;
    String currentField; //parametro de busqueda
    String menuName = "";
    String opcion = ""; //CRUD
    
    /**
     * Creates new form RegistrosEmpleados
     * @params opcion 
     */
    public RegEmpleados(String menuName) {
        initComponents();
        formParams = new HashMap();
        this.menuName = menuName;
        setTitle("Empleados");
        rc = new RegistrosController();
        rc.init("empleados", formPanel);
        cargarTabla();
        limpiarFormulario();
        //set TextField names
        textFieldId.setName("textFieldId");
        textFieldNombre.setName("textFieldNombre");
        textFieldApellido.setName("textFieldApellido");
        textFieldCedula.setName("textFieldCedula");
        textFieldBuscar.setName("textFieldBuscar");
        
        
        
        // Agregar ListSelectionListener al JTable
        tablaEmpleados.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                // Obtener la fila seleccionada
                int selectedRow = tablaEmpleados.getSelectedRow();
                if (selectedRow != -1) {
                    // Obtener los valores de la fila seleccionada
                    DefaultTableModel model = (DefaultTableModel) tablaEmpleados.getModel();
                    Map<String, Object> rowData = new HashMap<>();
                    for (int i = 0; i < model.getColumnCount(); i++) {
                        String columnName = model.getColumnName(i);
                        Object value = model.getValueAt(selectedRow, i);
                        rowData.put(columnName, value);
                    }
                    
                    // Establecer los valores en los JTextFields
                    textFieldId.setText(rowData.get("id").toString());
                    textFieldNombre.setText(rowData.get("nombre").toString());
                    textFieldApellido.setText(rowData.get("apellido").toString());
                    textFieldCedula.setText(rowData.get("cedula").toString());
                    
                }
            }
        });

    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formPanel = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        tablaEmpleados = new javax.swing.JTable();
        textFieldCedula = new javax.swing.JTextField();
        lblCedula = new javax.swing.JLabel();
        textFieldApellido = new javax.swing.JTextField();
        lblApellido = new javax.swing.JLabel();
        textFieldNombre = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        lblId = new javax.swing.JLabel();
        textFieldId = new javax.swing.JTextField();
        textFieldBuscar = new javax.swing.JTextField();
        lblBuscar = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);

        tablaEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "cedula", "nombre", "apellido"
            }
        ));
        jScrollPane.setViewportView(tablaEmpleados);
        if (tablaEmpleados.getColumnModel().getColumnCount() > 0) {
            tablaEmpleados.getColumnModel().getColumn(0).setMinWidth(0);
            tablaEmpleados.getColumnModel().getColumn(0).setPreferredWidth(0);
            tablaEmpleados.getColumnModel().getColumn(0).setMaxWidth(0);
            tablaEmpleados.getColumnModel().getColumn(1).setMinWidth(0);
            tablaEmpleados.getColumnModel().getColumn(1).setPreferredWidth(0);
        }

        textFieldCedula.setName("textFieldCedula"); // NOI18N
        textFieldCedula.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldCedulaFocusGained(evt);
            }
        });

        lblCedula.setText("NÂ° Doc.");

        textFieldApellido.setName("textFieldApellido"); // NOI18N
        textFieldApellido.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldApellidoFocusGained(evt);
            }
        });

        lblApellido.setText("Apellido");

        textFieldNombre.setName("textFieldNombre"); // NOI18N
        textFieldNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldNombreFocusGained(evt);
            }
        });
        textFieldNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldNombreActionPerformed(evt);
            }
        });

        lblNombre.setText("Nombre");

        lblId.setText("ID");

        textFieldId.setName("textFieldId"); // NOI18N
        textFieldId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldIdFocusGained(evt);
            }
        });
        textFieldId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldIdKeyPressed(evt);
            }
        });

        textFieldBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldBuscarActionPerformed(evt);
            }
        });
        textFieldBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldBuscarKeyPressed(evt);
            }
        });

        lblBuscar.setText("Buscar");

        javax.swing.GroupLayout formPanelLayout = new javax.swing.GroupLayout(formPanel);
        formPanel.setLayout(formPanelLayout);
        formPanelLayout.setHorizontalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(textFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                        .addGroup(formPanelLayout.createSequentialGroup()
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblId)
                                .addComponent(lblNombre))
                            .addGap(18, 18, 18)
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(textFieldNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                .addComponent(textFieldId))
                            .addGap(18, 18, 18)
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblApellido)
                                .addComponent(lblCedula))
                            .addGap(18, 18, 18)
                            .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(textFieldApellido, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                .addComponent(textFieldCedula)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        formPanelLayout.setVerticalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblId)
                    .addComponent(textFieldCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCedula))
                .addGap(11, 11, 11)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombre)
                    .addComponent(textFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBuscar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(formPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(formPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldIdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldIdFocusGained
        this.currentField = "id";
    }//GEN-LAST:event_textFieldIdFocusGained

    private void textFieldCedulaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldCedulaFocusGained
        this.currentField = "cedula";
    }//GEN-LAST:event_textFieldCedulaFocusGained

    private void textFieldNombreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldNombreFocusGained
        this.currentField = "nombre";
    }//GEN-LAST:event_textFieldNombreFocusGained

    private void textFieldApellidoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldApellidoFocusGained
        this.currentField = "apellido";
    }//GEN-LAST:event_textFieldApellidoFocusGained

    private void textFieldNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldNombreActionPerformed

    private void textFieldBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldBuscarActionPerformed

    private void textFieldBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldBuscarKeyPressed
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String criterio = textFieldBuscar.getText().trim();
            buscar(criterio);
         }
    }//GEN-LAST:event_textFieldBuscarKeyPressed

    private void textFieldIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldIdKeyPressed
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                String criterio = textFieldBuscar.getText().trim();
                buscar(criterio);
         }
    }//GEN-LAST:event_textFieldIdKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel formPanel;
    public javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel lblApellido;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblCedula;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblNombre;
    public javax.swing.JTable tablaEmpleados;
    public javax.swing.JTextField textFieldApellido;
    private javax.swing.JTextField textFieldBuscar;
    public javax.swing.JTextField textFieldCedula;
    public javax.swing.JTextField textFieldId;
    public javax.swing.JTextField textFieldNombre;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public JInternalFrame getActive() {
        return this;
    }
    
    @Override
    public final void limpiarFormulario(){
        textFieldId.setText("0");
        textFieldNombre.setText("");
        textFieldApellido.setText("");
        textFieldCedula.setText("");
        textFieldNombre.requestFocus();
    }
    
    /**
     * Carga la TablaEmpleados con todos los datos
     */
    private void cargarTabla(){
        //recupera tabModel 
        DefaultTableModel tabModel = (DefaultTableModel) tablaEmpleados.getModel();        
        tabModel.setRowCount(0);
        //recupera nombre de columnas de tabModel
        ArrayList<String> tabColumnNames = new ArrayList();
        for (int i = 0; i < tabModel.getColumnCount(); i++){
         tabColumnNames.add(tabModel.getColumnName(i).toLowerCase());
         // Convierte los nombres de las columnas a minÃºsculas para comparaciÃ³n
        }
        
        //Recupera datos
        ArrayList<Map<String, String>> registers;
        Map<String, String> fields = new HashMap<>();
        Map<String, String> where = new HashMap<>();
        fields.put("*", "*");
        registers = rc.searchListById(fields, where);
        
        // Verifica si hay registros para mostrar
        if (registers.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay registros que mostrar", "InformaciÃ³n", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        // Agrega los registros al modelo de la tabla
        for (Map<String, String> register : registers) {
            Object[] fila = new Object[tabModel.getColumnCount()];
            for (int i = 0; i < tabModel.getColumnCount(); i++) {
                // Nombre de la columna actual en minÃºsculas
                String columnName = tabColumnNames.get(i);
                // Verifica si el mapa de registro contiene la clave correspondiente a la columna
                if (register.containsKey(columnName)) {
                    fila[i] = register.get(columnName); // Asigna el valor del registro a la fila
                } else {
                    // Si el mapa de registro no contiene la clave correspondiente, agrega un valor vacÃ­o
                    fila[i] = "";
                }
            }
            tabModel.addRow(fila); // Agrega la fila al modelo de la tabla
        }
        // Asignar el modelo a la tabla
        tablaEmpleados.setModel(tabModel);
    }
    
    /**Actualiza los registros en tabla*/
    private void recargarTabla(){
        cargarTabla();
    }
    
    @Override
    public void crearRegistro(String opcion){ // operacion C
        int validacion = Tools.validarPermiso(conexion.getGrupoId(), menuName, opcion);
        if(validacion == 0){ // 0-sin permiso 1-permitido
            String msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÃN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÃN...!", JOptionPane.OK_OPTION);
            return;
        }
        if(validacion == 1){
            if(Integer.parseInt(textFieldId.getText()) > 0){
                String msg = "Para crear un registro nuevo utilice ID = 0 ";
                JOptionPane.showMessageDialog(this, msg, "ATENCIÃN...!", JOptionPane.OK_OPTION);
                textFieldId.requestFocus();
                return;
            }
            rc.ProcesarSolicitud(opcion);
            limpiarFormulario();
            recargarTabla();
        }
    }
    
    @Override
    public void modificarRegistro(String opcion){ //operacion U
        int validacion = Tools.validarPermiso(conexion.getGrupoId(), menuName, opcion);
        if(validacion == 0){
            String msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÃN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÃN...!", JOptionPane.OK_OPTION);
            return;
        }
        if(validacion == 1){
            Map<String, String> search;
            System.out.println("modificarRegistro validacion = 1");
            formParams.put("id", textFieldId.getText());
            search = rc.searchById(formParams);
            if(search.isEmpty()){ //verifica que exista registro con ID
                String msg = "NO EXISTE REGISTRO CON ID:" + textFieldId.getText();
                JOptionPane.showMessageDialog(this, msg, "ATENCIÃN...!", JOptionPane.OK_OPTION);
                return;
            }
            rc.ProcesarSolicitud("U");
            recargarTabla();
        }

    }
    
    @Override
    public void eliminarRegistro(String opcion){
        this.opcion = opcion;
        int validacion = Tools.validarPermiso(conexion.getGrupoId(), menuName, opcion);
        if(validacion == 0){
            String msg = "NO TIENE PERMISO PARA REALIZAR ESTA OPERACIÃN ";
            JOptionPane.showMessageDialog(this, msg, "ATENCIÃN...!", JOptionPane.OK_OPTION);
            return;
        }
        if(validacion == 1){
            rc.ProcesarSolicitud("D");
            limpiarFormulario();
            recargarTabla();
        }
    }

/**
 * Realiza una bÃºsqueda en la tabla de empleados utilizando el criterio especificado.
 * @param criterio El criterio de bÃºsqueda a utilizar.
 */    
public void buscar(String criterio) {
    // Limpia el modelo de la tabla
    DefaultTableModel modeloTabla = (DefaultTableModel) tablaEmpleados.getModel();
    modeloTabla.setRowCount(0);

    // Realiza la consulta a la base de datos con el criterio proporcionado
    Map<String, String> campos = new HashMap<>();
    Map<String, String> condiciones = new HashMap<>();
    campos.put("*", "*");
    condiciones.put(currentField, criterio); // Suponiendo que deseas buscar por el campo "nombre"
    ArrayList<Map<String, String>> resultados = rc.searchListById(campos, condiciones);

    // Verifica si se encontraron resultados
    if (resultados.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No se encontraron resultados", "BÃºsqueda", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    // Agrega los resultados a la tabla
    for (Map<String, String> resultado : resultados) {
        Object[] fila = new Object[modeloTabla.getColumnCount()];
        fila[0] = resultado.get("id"); // Suponiendo que la primera columna es el ID
        fila[1] = resultado.get("cedula"); // Suponiendo que la segunda columna es la cedula
        fila[2] = resultado.get("nombre");
        fila[3] = resultado.get("apellido");
        modeloTabla.addRow(fila);
    }

    // Asigna el modelo actualizado a la tabla
    tablaEmpleados.setModel(modeloTabla);
}



    
}
